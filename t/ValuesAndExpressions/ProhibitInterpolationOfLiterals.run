## name Basic failure
## failures 2
## cut

print "this is literal";
print qq{this is literal};

#-----------------------------------------------------------------------------

## name Basic passing
## failures 0
## cut

print 'this is literal';
print q{this is literal};

#-----------------------------------------------------------------------------

## name Code with all delimiters in configuration
## failures 0
## parms {allow => 'qq( qq{ qq[ qq/'}
## cut

$sql = qq(select foo from bar);
$sql = qq{select foo from bar};
$sql = qq[select foo from bar];
$sql = qq/select foo from bar/;

is( pcritique($policy, \$code, \%config), 0, $policy);

#-----------------------------------------------------------------------------

## name Code with not all delimiters in configuration
## failures 2
## parms {allow => 'qq( qq{'}
## cut

$sql = qq(select foo from bar);
$sql = qq{select foo from bar};
$sql = qq[select foo from bar];
$sql = qq/select foo from bar/;

#-----------------------------------------------------------------------------

## name Configuration with only delimiters, no operators
## failures 2
## parms {allow => '() {}'}
## cut

$sql = qq(select foo from bar);
$sql = qq{select foo from bar};
$sql = qq[select foo from bar];
$sql = qq/select foo from bar/;

#-----------------------------------------------------------------------------

## name Configuration with matching closing delimiters
## failures 2
## parms {allow => 'qq() qq{}'}
## cut

$sql = qq(select foo from bar);
$sql = qq{select foo from bar};
$sql = qq[select foo from bar];
$sql = qq/select foo from bar/;

#-----------------------------------------------------------------------------

## name Disallow interpolationi f string contains single quote
## failures 2
## cut

$sql = "it's me";
$sql = "\'";

#-----------------------------------------------------------------------------

## name Allow interpolation if string contains single quote, with option on.
## failures 0
## parms { allow_if_string_contains_single_quote => 1 }
## cut

$sql = "it's me";
$sql = "\'";

#-----------------------------------------------------------------------------

## name allow double quotes if called for.
## failures 0
## cut

$text = "Able was $I ere $I saw Elba";
$text = "$I think, therefore ...";
$text = "Anyone @home?";
$text = "Here we have\ta tab";
$text = "Able was \\$I ere \\$I saw Elba";
$text = "\\$I think, therefore ...";
$text = "Anyone \\@home?";
$text = "Here we have\\\ta tab";

#-----------------------------------------------------------------------------

## name prohibit double quotes if not called for
## failures 8
## cut

$text = "Able was \$I ere \$I saw Elba";
$text = "\$I think, therefore ...";
$text = "Anyone \@home?";
$text = "Here we do not have\\ta tab";
$text = "Able was \\\$I ere \\\$I saw Elba";
$text = "\\\$I think, therefore ...";
$text = "Anyone \\\@home?";
$text = "Here we do not have\\\\ta tab";

#-----------------------------------------------------------------------------
# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 78
#   indent-tabs-mode: nil
#   c-indentation-style: bsd
# End:
# ex: set ts=8 sts=4 sw=4 tw=78 ft=perl expandtab shiftround :
