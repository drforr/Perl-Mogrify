#!/usr/bin/perl

package main;

use 5.006001;
use strict;
use warnings;

use Perl::ToPerl6::Command qw< run >;

#-----------------------------------------------------------------------------

our $VERSION = '0.040';

#-----------------------------------------------------------------------------
# Begin program.  Don't run when loaded as a library

# This %ENV check is to allow perlmogrify to function when bundled under PAR,
# which invokes this program not as the top stack frame. -- rjbs, 2008-08-11
exit run() if not caller or $ENV{PAR_0};

#-----------------------------------------------------------------------------
1;

__END__

#-----------------------------------------------------------------------------

=pod

=for stopwords DGR INI-style vim-fu minibuffer -noprofile API
-profileproto -profile-proto ben Jore formatter Peshak pbp Komodo
screenshots tty emacs gVIM plugin Perlish templating ActivePerl
ActiveState Twitter

=head1 NAME

C<perlmogrify> - Command-line interface to transform Perl source.


=head1 SYNOPSIS

  perlmogrify [-12345 | --brutal | --cruel | --harsh | --stern | --gentle]
              [--necessity number | name] [{-p | --profile} file | --noprofile]
              [--top [ number ]] [--theme expression] [--include pattern]
              [--exclude pattern] [{-s | --single-transformer} pattern]
              [--in-place]
              [--detail number]
              [--only | --noonly] [--profile-strictness {warn|fatal|quiet}]
              [--force | --noforce] [--statistics] [--statistics-only]
              [--count | -C] [--verbose {number | format}]
              [--color | --nocolor] [--pager pager] [--quiet]
              [--color-necessity-highest color_specification]
              [--color-necessity-high color_specification]
              [--color-necessity-medium color_specification]
              [--color-necessity-low color_specification]
              [--color-necessity-lowest color_specification]
              [--files-with-transformations | -l]
              [--files-without-transformations | -L]
              [--program-extensions file_name_extension]
              {FILE | DIRECTORY | STDIN}

  perlmogrify --profile-proto

  perlmogrify { --list | --list-enabled | --list-themes | --doc pattern [...] }

  perlmogrify { --help | --options | --man | --version }


=head1 DESCRIPTION

C<perlmogrify> is a Perl5 to Perl6 code transformer. It's the executable front
end to L<Perl::ToPerl6>, which is a configurable, extensible code transfomer.
Most of the code transfoermers were developed simply by taking sample Perl5
source and hand-editing it until it compiled under Perl6. 

The author hopes that the resultant Perl6 code is semantically correct, but
makes no guarantees. The framework is completely based on L<Perl::Critic>
and lets you use all of the extant L<Perl::Critic> options and .perlcriticrc
configurations, under the name of '.perlmogrifyrc'.

Code transformers can have options passed to them, but at the moment none of 
the core code transformers have options. Some basic options, such as
transforming C<qw(a b c)> into more Perl6ish C<< <a b c> >> may be supported
later on, but the general idea is transforming syntactically correct Perl5
code into Perl6.

This documentation only covers how to drive this command.  For all other
information, such as API reference and alternative interfaces, please see the
documentation for L<Perl::ToPerl6> itself.

=head1 USAGE EXAMPLES

Before getting into all the gory details, here are some basic usage
examples to help get you started.

    # Apply only core transformations
    perlmogrify YourModule.pm

    # Same as above, but read input from STDIN
    perlmogrify

    # Recursively process all Perl files beneath directory
    perlmogrify /some/directory

    # Apply slightly less severe transformations too (necessity >= 4)
    perlmogrify -4 YourModule.pm

    # Same as above, but using named necessity level
    perlmogrify --stern YourModule.pm

    # Apply all transformations, regardless of necessity (necessity >= 1)
    perlmogrify -1 YourModule.pm

    # Same as above, but using named necessity level
    perlmogrify --brutal YourModule.pm

    # Apply only core transformations
    perlmogrify --theme core YourModule.pm

    # Apply additional transformations that match m/variables/xms
    perlmogrify --include variables YourModule.pm

    # Use defaults from somewhere other than ~/.perlmogrifyrc
    perlmogrify --profile project/specific/perlmogrifyrc YourModule.pm


=head1 ARGUMENTS

The arguments are paths to the files you wish to analyze.  You may specify
multiple files.  If an argument is a directory, C<perlmogrify> will analyze all
Perl files below the directory.  If no arguments are specified, then input is
read from STDIN.


=head1 OPTIONS

Option names can be abbreviated to uniqueness and can be stated with single or
double dashes, and option values can be separated from the option name by a
space or '=' (as with L<Getopt::Long>). Option names are also case-sensitive.

Most of these options come from the original L<Perl::Critic> module, and are
more relevant to its operation. They'll remain in the L<Perl::ToPerl6> source
and be pressed into new duties as time allows.

The documentation still reflects their L<Perl::Critic> usages, but again this
will be rewritten as time allows.

=over

=item C<--profile FILE> or C<-p FILE>

Directs C<perlmogrify> to use a profile named by FILE rather than looking for
the default F<.perlmogrifyrc> file in the current directory or your home
directory.  See L<Perl::ToPerl6/"CONFIGURATION"> for more information.

=item C<--noprofile>

Directs C<perlmogrify> not to load any configuration file, thus reverting to
the default configuration for all Transformers.

=item C<--necessity N>

Directs C<perlmogrify> to only apply Transformers with a necessity greater than
C<N>.  Necessity values are integers ranging from 1 (least severe) to 5 (most
severe).  The default is 5.  For a given C<--profile>, decreasing the
C<--necessity> will usually produce more transformations. You can set the default
value for this option in your F<.perlmogrifyrc> file.  You can also redefine
the C<necessity> for any Transformer in your F<.perlmogrifyrc> file.  See
L<"CONFIGURATION"> for more information.

=item C<-5 | -4 | -3 | -2 | -1>

These are numeric shortcuts for setting the C<--necessity> option.  For
example, C<"-4"> is equivalent to C<"--necessity 4">.  If multiple shortcuts
are specified, then the most restrictive one wins.  If an explicit
C<--necessity> option is also given, then all shortcut options are silently
ignored.  NOTE: Be careful not to put one of the number necessity shortcut
options immediately after the C<--top> flag or C<perlmogrify> will interpret it
as the number of transformations to report.

=item C<--necessity NAME>

If it is difficult for you to remember whether necessity "5" is the most or
least restrictive level, then you can use one of these named values:

    NECESSITY NAME   ...is equivalent to...   NECESSITY NUMBER
    --------------------------------------------------------
    --necessity gentle                           --necessity 5
    --necessity stern                            --necessity 4
    --necessity harsh                            --necessity 3
    --necessity cruel                            --necessity 2
    --necessity brutal                           --necessity 1

=item C<--gentle | --stern | --harsh | --cruel | --brutal>

These are named shortcuts for setting the C<--necessity> option.  For example,
C<"--cruel"> is equivalent to C<"--necessity 2">.  If multiple shortcuts are
specified, then the most restrictive one wins.  If an explicit C<--necessity>
option is also given, then all shortcut options are silently ignored.

=item C<--theme RULE>

Directs C<perlmogrify> to apply only Transformers with themes that satisfy the
C<RULE>.  Themes are arbitrary names for groups of related transformers.
You can combine theme names with boolean operators to create an arbitrarily
complex C<RULE>.  For example, the following would apply only Transformers that
have a 'bugs' AND 'core' theme:

    $> perlmogrify --theme='bugs && core' MyModule.pm

Unless the C<--necessity> option is explicitly given, setting C<--theme>
silently causes the C<--necessity> to be set to 1.  You can set the default
value for this option in your F<.perlmogrifyrc> file. See
L<Perl::ToPerl6/"TRANSFORMER THEMES"> for more information about themes.

=item C<--include PATTERN>

Directs C<perlmogrify> to apply additional Transformers that match the regex
C</PATTERN/imx>.  Use this option to temporarily override your profile and/or
the necessity settings at the command-line.  For example:

    perlmogrify --include=layout my_file.pl

This would cause C<perlmogrify> to apply all the C<CodeLayout::*> transformers
even if they have a necessity level that is less than the default level of 5, or
have been disabled in your F<.perlmogrifyrc> file.  You can specify multiple
C<--include> options and you can use it in conjunction with the C<--exclude>
option.  Note that C<--exclude> takes precedence over C<--include> when a
Transformer matches both patterns.  You can set the default value for this
option in your F<.perlmogrifyrc> file.

=item C<--exclude PATTERN>

Directs C<perlmogrify> to not apply any Transformer that matches the regex
C</PATTERN/imx>.  Use this option to temporarily override your profile and/or
the necessity settings at the command-line.  For example:

    perlmogrify --exclude=strict my_file.pl

This would cause C<perlmogrify> to not apply the C<RequireUseStrict> and
C<ProhibitNoStrict> Transformers even though they have the highest necessity
level. You can specify multiple C<--exclude> options and you can use it in
conjunction with the C<--include> option.  Note that C<--exclude> takes
precedence over C<--include> when a Transformer matches both patterns.  You can set
the default value for this option in your F<.perlmogrifyrc> file.

=item C<--single-transformer PATTERN> or C<-s PATTERN>

Directs C<perlmogrify> to apply just one Transformer module matching the regex
C</PATTERN/ixms>, and exclude all other Transformers.  This option has
precedence over the C<--necessity>, C<--theme>, C<--include>, C<--exclude>, and
C<--only> options.  For example:

    perlmogrify --single-transformer=nowarnings my_file.pl

This would cause C<perlmogrify> to apply just the C<ProhibitNoWarnings>
Transformer, regardless of the necessity level setting.  No other Transformers
would be applied.

This is equivalent to what one might intend by...

    perlmogrify --exclude=. --include=nowarnings my_file.pl

... but this won't work because the C<--exclude> option overrides the
C<--include> option.

The equivalent of this option can be accomplished by creating a custom profile
containing only the desired transformer and then running...

    perlmogrify --profile=customprofile --only my_file.pl

=item C<--top [ N ]>

Directs C<perlmogrify> to report only the top C<N> Transformer transformations
in each file, ranked by their necessity.  If C<N> is not specified, it defaults
to 20.  If the C<--necessity> option (or one of the shortcuts) is not explicitly
given, the C<--top> option implies that the minimum necessity level is "1" (i.e.
"brutal"). Users can redefine the necessity for any Transformer in their
F<.perlmogrifyrc> file.  See L<"CONFIGURATION"> for more information.  You can
set the default value for this option in your F<.perlmogrifyrc> file.  NOTE: Be
careful not to put one of the necessity shortcut options immediately after the
C<--top> flag or C<perlmogrify> will interpret it as the number of
transformations to report.

=item C<--detail [ N ]>

Directs C<perlmogrify> to report details of transformations of necessity C<N>
and above. If C<N> is not specified, it defaults to 5. You can set the default
value for this option in your F<.perlmogrifyrc> file.

=item C<--force>

Directs C<perlmogrify> to ignore the magical C<"## no mogrify"> annotations in
the source code. See L<"BENDING THE RULES"> for more information.  You can set
the default value for this option in your F<.perlmogrifyrc> file.

=item C<--statistics>

Causes several statistics about the code being scanned and the transformations
found to be reported after any other output.

=item C<--statistics-only>

Like the C<--statistics> option, but suppresses normal output and only shows
the statistics.

=item C<--verbose N | FORMAT>

Sets the verbosity level or format for reporting transformations.  If given a
number (C<N>), C<perlmogrify> reports transformations using one of the predefined
formats described below.  If given a string (C<FORMAT>), it is interpreted to
be an actual format specification.  If the C<--verbose> option is not
specified, it defaults to either 4 or 5, depending on whether multiple files
were given as arguments to C<perlmogrify>.  You can set the default value for
this option in your F<.perlmogrifyrc> file.

    Verbosity     Format Specification
    -----------   -------------------------------------------------------
     1            "%f:%l:%c:%m\n",
     2            "%f: (%l:%c) %m\n",
     3            "%m at %f line %l\n",
     4            "%m at line %l, column %c.  %e.  (Necessity: %s)\n",
     5            "%f: %m at line %l, column %c.  %e.  (Necessity: %s)\n",
     6            "%m at line %l, near '%r'.  (Necessity: %s)\n",
     7            "%f: %m at line %l near '%r'.  (Necessity: %s)\n",
     8            "[%p] %m at line %l, column %c.  (Necessity: %s)\n",
     9            "[%p] %m at line %l, near '%r'.  (Necessity: %s)\n",
    10            "%m at line %l, column %c.\n  %p (Necessity: %s)\n%d\n",
    11            "%m at line %l, near '%r'.\n  %p (Necessity: %s)\n%d\n"

Formats are a combination of literal and escape characters similar to the way
C<sprintf> works.  See L<String::Format|String::Format> for a full explanation
of the formatting capabilities.  Valid escape characters are:

    Escape    Meaning
    -------   ------------------------------------------------------------
    %c        Column number where the transformation occurred
    %d        Full diagnostic discussion of the transformation
    %e        Explanation of transformation
    %F        Just the name of the file where the transformation occurred.
    %f        Path to the file where the transformation occurred.
    %l        Line number where the transformation occurred
    %m        Brief description of the transformation
    %P        Full name of the Transformer module that created the transformation
    %p        Name of the Transformer without the Perl::ToPerl6::Transformer:: prefix
    %r        The string of source code that caused the transformation
    %C        The class of the PPI::Element that caused the transformation
    %s        The necessity level of the transformation

The purpose of these formats is to provide some compatibility with text
editors that have an interface for parsing certain kinds of input. See
L<"EDITOR INTEGRATION"> for more information about that.

=item C<--list>

Displays a condensed listing of all the L<Perl::ToPerl6::Transformer> modules
that are found on this machine.  This option lists I<all> Transformers,
regardless of your F<.perlmogrifyrc> or command line options.  For each
Transformer, the name, default necessity and default themes are shown.

=item C<--list-enabled>

Displays a condensed listing of all the L<Perl::ToPerl6::Transformer> modules
that I<would> be applied, if you were actually going to transform a file with
this command. This is useful when you've constructed a complicated command or
modified your F<.perlmogrifyrc> file and you want to see exactly which
Transformers are going to be enforced (or not enforced, as the case may be).
For each Transformer, the name, default necessity and default themes are shown.

=item C<--list-themes>

Displays a list of all the themes of the L<Perl::ToPerl6::Transformer> modules
that are found on this machine.

=item C<--profile-proto>

Displays an expanded listing of all the L<Perl::ToPerl6::Transformer> modules
that are found on this machine.  For each Transformer, the name, default
necessity and default themes are shown, as well as the name of any additional
parameters that the Transformer supports.  The format is suitable as a
prototype for your F<.perlmogrifyrc> file.

=item C<--in-place>

Directs perlmogrify to transform the file or directory in-place. This obviously
alters your data, so please do not run it on a repository you want to preserve.
You can set the default value for this option in your F<.perlmogrifyrc> file.

=item C<--only>

Directs perlmogrify to apply only Transformers that are explicitly mentioned in
your F<.perlmogrifyrc> file.  This is useful if you want to use just a small
subset of Transformers without having to disable all the others.  You can set
the default value for this option in your F<.perlmogrifyrc> file.

=item C<--profile-strictness {warn|fatal|quiet}>

Directs perlmogrify how to treat certain recoverable problems found in a
F<.perlmogrifyrc> or file specified via the C<--profile> option. Valid values
are C<warn> (the default), C<fatal>, and C<quiet>.  For example, perlmogrify
normally only warns about profiles referring to non-existent Transformers, but
this option can make this situation fatal. You can set the default value for
this option in your F<.perlmogrifyrc> file.

=item C<--count>

=item C<-C>

Display only the number of transformations for each file.  Use this feature to
get a quick handle on where a large pile of code might need the most attention.

=item C<--color>
=item C<--colour>

This option is on when outputting to a tty.  When set, Necessity 5 and 4 are
colored red and yellow, respectively.  Colorization only happens if
L<Term::ANSIColor> is installed and it only works on non-Windows environments.
Negate this switch to disable color.  You can set the default value for this
option in your F<.perlmogrifyrc> file.

=item C<--pager PAGER_COMMAND_STRING>

If set, perlmogrify will pipe it's output to the given PAGER_COMMAND_STRING.
You can set the default value for this option in your F<.perlmogrifyrc> file.

Setting a pager turns off color by default.  You will have to turn color on
explicitly.  If you want color, you'll probably also want to tell your pager
to display raw characters.  For C<less> and C<more>, use the -R switch.

=item C<--color-necessity-highest COLOR_SPECIFICATION>

Specifies the color to be used for highest necessity transformations, as a
Term::ANSIColor color specification. Can also be specified as C<--colour-
necessity-highest>, C<--color-necessity-5>, or C<--colour-necessity-5>.

=item C<--color-necessity-high COLOR_SPECIFICATION>

Specifies the color to be used for high necessity transformations, as a
Term::ANSIColor color specification. Can also be specified as C<--colour-
necessity-high>, C<--color-necessity-4>, or C<--colour-necessity-4>.

=item C<--color-necessity-medium COLOR_SPECIFICATION>

Specifies the color to be used for medium necessity transformations, as a
Term::ANSIColor color specification. Can also be specified as C<--colour-
necessity-medium>, C<--color-necessity-3>, or C<--colour-necessity-3>.

=item C<--color-necessity-low COLOR_SPECIFICATION>

Specifies the color to be used for low necessity transformations, as a
Term::ANSIColor color specification. Can also be specified as C<--colour-
necessity-low>, C<--color-necessity-2>, or C<--colour-necessity-2>.

=item C<--color-necessity-lowest COLOR_SPECIFICATION>

Specifies the color to be used for lowest necessity transformations, as a
Term::ANSIColor color specification. Can also be specified as C<--colour-
necessity-lowest>, C<--color-necessity-1>, or C<--colour-necessity-1>.

=item C<--files-with-transformations>

Display only the names of files with transformations.  Use this feature with
--single-transformer to find files that contain transformations of a given
transformer. Can also be specified as C<--l>.

=item C<--files-without-transformations>

Display only the names of files without transformations.  Use this feature with
--single-transformer to find files that do not contain transformations of a
given transformer. Can also be specified as C<--L>.

=item C<--program-extensions file_name_extension>

Tell C<perlmogrify> to treat files whose names end in the given file name
extension as programs, not as modules. If a leading '.' is desired it must be
explicitly specified, e.g.

    --program-extensions .pl

The matching is case-sensitive, and the option may be specified as many times
as desired, e.g.

    --program-extensions .pl --program-extensions .cgi

The above can also be done by quoting the file name extensions:

    --program-extensions '.pl .cgi'

Files whose name ends in '.PL' will always be considered programs.

=item C<--doc PATTERN>

Displays the perldoc for all L<Perl::ToPerl6::Transformer> modules that match
C<m/PATTERN/ixms>.  Since Transformer modules tend to have rather long names, this
just provides a more convenient way to say something like: C<"perldoc
Perl::ToPerl6::Transformer::ValuesAndExpressions::RequireUpperCaseH
eredocTerminator"> at the command prompt.

=item C<--quiet>

Suppress the "source OK" message when no transformations are found.

=item C<--help>

=item C<-?>

=item C<-H>

Displays a brief summary of options and exits.

=item C<--options>

Displays the descriptions of the options and exits.  While this output is
long, it it nowhere near the length of the output of C<--man>.

=item C<--man>

Displays the complete C<perlmogrify> manual and exits.

=item C<--version>

=item C<-V>

Displays the version number of C<perlmogrify> and exits.

=back

=head1 CONFIGURATION

Most of the settings for Perl::ToPerl6 and each of the Transformer modules can
be controlled by a configuration file.  The default configuration file is
called F<.perlmogrifyrc>.  C<perlmogrify> will look for this file in the
current directory first, and then in your home directory. Alternatively, you
can set the C<PERLMOGRIFY> environment variable to explicitly point to a
different file in another location.  If none of these files exist, and the
C<--profile> option is not given on the command-line, then all Transformers
will be loaded with their default configuration.

The format of the configuration file is a series of INI-style blocks that
contain key-value pairs separated by "=". Comments should start with "#" and
can be placed on a separate line or after the name-value pairs if you desire.

Default settings for perlmogrify itself can be set B<before the first named
block.> For example, putting any or all of these at the top of your
F<.perlmogrifyrc> file will set the default value for the corresponding
command-line argument.

    necessity  = 3                                     #Integer or named level
    only       = 1                                     #Zero or One
    in-place   = 0                                     #Zero or One
    force      = 0                                     #Zero or One
    detail     = 0                                     #Integer
    verbose    = 4                                     #Integer or format spec
    top        = 50                                    #A positive integer
    theme      = (pbp + security) * bugs               #A theme expression
    include    = NamingConventions ClassHierarchies    #Space-delimited list
    exclude    = Variables  Modules::RequirePackage    #Space-delimited list

The remainder of the configuration file is a series of blocks like this:

    [Perl::ToPerl6::Transformer::Category::TransformerName]
    necessity = 1
    set_themes = foo bar
    add_themes = baz
    arg1 = value1
    arg2 = value2

C<Perl::ToPerl6::Transformer::Category::TransformerName> is the full name of a
module that implements the transformer.

C<necessity> is the level of importance you wish to assign to the Transformer.
All Transformer modules are defined with a default necessity value ranging from 1
(least severe) to 5 (most severe).  However, you may disagree with the default
necessity and choose to give it a higher or lower necessity, based on your own
coding philosophy.  You can set the C<necessity> to an integer from 1 to 5, or
use one of the equivalent names:

    NECESSITY NAME ...is equivalent to... NECESSITY NUMBER
    ----------------------------------------------------
    gentle                                             5
    stern                                              4
    harsh                                              3
    cruel                                              2
    brutal                                             1

C<set_themes> sets the theme for the Transformer and overrides its default
theme.  The argument is a string of one or more whitespace-delimited
alphanumeric words.  Themes are case-insensitive.  See L<"TRANSFORMER THEMES">
for more information.

C<add_themes> appends to the default themes for this Transformer.  The argument
is a string of one or more whitespace-delimited words. Themes are case-
insensitive.  See L<"TRANSFORMER THEMES"> for more information.

The remaining key-value pairs are configuration parameters that will be passed
into the constructor of that Transformer.  The constructors for most Transformer modules
do not support arguments, and those that do should have reasonable defaults.
See the documentation on the appropriate Transformer module for more details.

Instead of redefining the necessity for a given Transformer, you can completely
disable a Transformer by prepending a '-' to the name of the module in your
configuration file.  In this manner, the Transformer will never be loaded,
regardless of the C<--necessity> given on the command line.

A simple configuration might look like this:

    #--------------------------------------------------------------
    # I think these are really important, so always load them

    [TestingAndDebugging::RequireUseStrict]
    necessity = 5

    [TestingAndDebugging::RequireUseWarnings]
    necessity = 5

    #--------------------------------------------------------------
    # I think these are less important, so only load when asked

    [Variables::ProhibitPackageVars]
    necessity = 2

    [ControlStructures::ProhibitPostfixControls]
    allow = if unless  # My custom configuration
    necessity = cruel   # Same as "necessity = 2"

    #--------------------------------------------------------------
    # Give these transformers a custom theme.  I can activate just
    # these transformers by saying "perlmogrify --theme 'larry || curly'"

    [Modules::RequireFilenameMatchesPackage]
    add_themes = larry

    [TestingAndDebugging::RequireTestLabels]
    add_themes = curly moe

    #--------------------------------------------------------------
    # I do not agree with these at all, so never load them

    [-NamingConventions::Capitalization]
    [-ValuesAndExpressions::ProhibitMagicNumbers]

    #--------------------------------------------------------------
    # For all other Transformers, I accept the default necessity,
    # so no additional configuration is required for them.

Note that all transformers included with the Perl::ToPerl6 distribution that have
integer parameters accept underscores ("_") in their values, as with Perl
numeric literals.  For example,

    [ValuesAndExpressions::RequireNumberSeparators]
    min_value = 1_000

For additional configuration examples, see the F<perlmogrifyrc> file that is
included in this F<examples> directory of this distribution.

Damian Conway's own Perl::ToPerl6 configuration is also included in this
distribution as F<examples/perlmogrifyrc-conway>.


=head1 THE POLICIES

A large number of Transformer modules are distributed with Perl::ToPerl6. They are
described briefly in the companion document L<Perl::ToPerl6::TransformerSummary> and
in more detail in the individual modules themselves.  Say C<"perlmogrify --doc
PATTERN"> to see the perldoc for all Transformer modules that match the regex
C<m/PATTERN/ixms>

There are a number of distributions of additional transformers on CPAN. If
L<Perl::ToPerl6> doesn't contain a transformer that you want, someone may have
already written it.  See L<Perl::ToPerl6/"SEE ALSO"> for a list of some of
these distributions.


=head1 TRANSFORMER THEMES

Each Transformer is defined with one or more "themes".  Themes can be used to
create arbitrary groups of Transformers.  They are intended to provide an
alternative mechanism for selecting your preferred set of Transformers. For
example, you may wish disable a certain set of Transformers when analyzing test
programs.  Conversely, you may wish to enable only a specific subset of
Transformers when analyzing modules.

The Transformers that ship with Perl::ToPerl6 are have been divided into the
following themes.  This is just our attempt to provide some basic logical
groupings.  You are free to invent new themes that suit your needs.

    THEME             DESCRIPTION
    ------------------------------------------------------------------------
    core              All transformers that ship with Perl::ToPerl6
    pbp               Transformers that come directly from "Perl Best Practices"
    bugs              Transformers that that prevent or reveal bugs
    certrec           Transformers that CERT recommends
    certrule          Transformers that CERT considers rules
    maintenance       Transformers that affect the long-term health of the code
    cosmetic          Transformers that only have a superficial effect
    complexity        Transformers that specificaly relate to code complexity
    security          Transformers that relate to security issues
    tests             Transformers that are specific to test programs

Say C<"perlmogrify --list"> to get a listing of all available transformers and the
themes that are associated with each one.  You can also change the theme for
any Transformer in your F<.perlmogrifyrc> file.  See the L<"CONFIGURATION"> section
for more information about that.

Using the C<--theme> command-line option, you can create an arbitrarily
complex rule that determines which Transformers to apply. Precedence is the same
as regular Perl code, and you can use parentheses to enforce precedence as
well.  Supported operators are:

    Operator    Altertative    Example
    -----------------------------------------------------------------
    &&          and            'pbp && core'
    ||          or             'pbp || (bugs && security)'
    !           not            'pbp && ! (portability || complexity)'

Theme names are case-insensitive.  If the C<--theme> is set to an empty
string, then it evaluates as true all Transformers.


=head1 BENDING THE RULES

For whatever reason, you may want to mark certain sections of code as
"do not transform". You can do that in three basic ways - The '## no mogrify'
marker tells the engine to skip transformations on the line it's on.

The '## no mogrify' comment on its own line suppresses transformation until
a '## use mogrify' comment on its own line, or the end of the file, whichever
comes first.

  require 'LegacyLibaray1.pl';  ## no mogrify
  require 'LegacyLibrary2.pl';  ## no mogrify

  for my $element (@list) {

      ## no mogrify

      $foo = "";              # Don't transform this
      $barf = bar() if $foo;  # or this
      #Some more evil code...

      ## use mogrify

      #Some good code...
      do_something($_);
  }

The C<"## no mogrify"> annotations direct Perl::ToPerl6 to ignore the remaining
lines of code until a C<"## use mogrify"> annotation is found. If the C<"## no
mogrify"> annotation is on the same line as a code statement, then only that
line of code is overlooked.  To direct perlmogrify to ignore the C<"## no
mogrify"> annotations, use the C<--force> option.

A bare C<"## no mogrify"> annotation disables all the active Transformers.
If you wish to disable only specific Transformers, add a list of Transformer
names as arguments just as you would for the C<"no strict"> or C<"no warnings">
pragma.  For example, this would disable the C<Variables::FormatSigils> and
C<Variables::FormatHashKeys> transformers until the end of the block or until
the next C<"## use mogrify"> annotation (whichever comes first):

    ## no mogrify (Variables::FormatSigils, Variables::FormatHashKeys);

    # Now exempt from the aforementioned transformers:
    $foo[0] = $x{foo-bar};

    $barf = bar() if $foo;

    $long_int = 10000000000;

Since the Transformer names are matched against the C<"## no mogrify"> arguments
as regular expressions, you can abbreviate the Transformer names or disable an
entire family of Transformers in one shot like this:

    ## no mogrify (Variables)

    # Now exempt from Variables::FormatSigils
    my $camelHumpVar = 'foo';

The argument list must be enclosed in parentheses and must contain one or more
comma-separated barewords (i.e. don't use quotes).  The C<"## no mogrify">
annotations can be nested, and Transformers named by an inner annotation will be
disabled along with those already disabled an outer annotation.

Some Transformer like C<Subroutines::ProhibitExcessComplexity> apply to an
entire block of code.  In those cases, C<"## no mogrify"> must appear on the
line where the transformations is reported.  For example:

    sub complicated_function {  ## no mogrify (ProhibitExcessComplexity)
        # Your code here...
    }

Some Transformers like C<File::Script> apply to the entire document, in which
case transformations are reported at line 1.  But if the file
requires a shebang line, it is impossible to put C<"## no mogrify"> on the
first line of the file.  This is a known limitation and it will be addressed
in a future release.  As a workaround, you can disable the affected transformers
at the command-line or in your F<.perlmogrifyrc> file.  But beware that this
will affect the analysis of B<all> files.

Use this feature wisely.  C<"## no mogrify"> should be used in the smallest
possible scope, or only on individual lines of code. And you should always be
as specific as possible about which transformers you want to disable (i.e. never
use a bare C<"## no mogrify">).  If Perl::ToPerl6 complains about your code, try
and find a compliant solution before resorting to this feature.


=head1 EXIT STATUS

If C<perlmogrify> has any errors itself, exits with status == 1.  If there are
no errors, but C<perlmogrify> finds Transformer transformations in your source
code, exits with status == 2.  If there were no errors and no transformations
were found, exits with status == 0.


=head1 THE L<Perl::ToPerl6> PHILOSOPHY

=over

Minimal changes for maximum effect. The transformers themselves are designed
without assumptions of the order they run in, even though there's a
quick-and-dirty C<run_before()>, C<run_after()> feature implemented so that
modules can ask to be run before or after a given module or modules.

Transformers should assume in general that they're running on Perl5 code,
although you can try out the 'run_before()' feature if you want to assert that
a particular transformer has been run before yours.

The goal overall is to just help get a Perl codebase to the point where it'll
compile under Perl6 with minimal changes. To that end the code is designed
to make just the bare minimum of changes, and where possible use Perl5-shaped
constructs, such as :P5 modifiers.

=back


=head1 EXTENDING THE MOGRIFIER

The simplest way to go about this is find a module in the list that performs a
task like what you want, copy that, and start walking its PPI tree. Each module
is presumed to act on one node of the tree at a time, in other words C<$elem>
will always be a single element of the type you're modifying. This keeps code
simple, and lets the main body collect statistics about what it's modifying.

For instance, when running it you'll get an *awful* lot of output about what
the modules are doing, complete with line and column numbers of where the
modifications are happening. This is more or less so that you can trace back
to the point of origin when a module does something you don't expect.

Your module receives the original document in C<$doc> and the element to
process in C<$elem>. If you make no modifications to the element, just return.
Otherwise, calling C<transformation()> tells the main application that your
module has changed source.

Just to keep the source tree clean and reasonably Perlish, I try to create new
tokens for whitespace and such where it's practical. Please also note that
at some points I'm forced to violate PPI encapsulation, for instance
changing brace styles or a heredoc's marker.

Something else to keep in mind as you're creating tests is that the
expression you're looking for won't always begin at the start of a
L<PPI::Statement>. As a trivial example, C<$x++> may occur at the end of
a long statement, such as C<1 if $x++>. So, when creating your test suites
be sure that at least a few of your test cases don't begin precisely at
the statement boundary.

Feel free to send me a pull request on GitHub if you've developed a module
and want it integrated.


=head1 CONTACTING THE DEVELOPMENT TEAM

Currently the development team is just me, [mailto:drforr@pobox.com] or send
me a pull request for the appropriate module on GitHUb. I'll keep an eye out
for requests and integrate them as they come in, or within a reasonable time
frame.

You can also catch me on IRC at either [irc://irc.perl.org/#perl] or
[irc://irc.freenode.net/#perl], and follow me on Twitter at
[https://twitter.com/drforr]

=head1 BUGS

Feel free to submit bugs via either RT or GitHub. GitHub and personal email
gets checked more frequently, or just bounce me a note on IRC if I happen to
be active.

=head1 CREDITS

Jeffrey Thalhammer - For creating the framework I'm shamelessly ripping off, so I don't have to create an entire plugin architecture.

Adam Kennedy - For creating L<PPI>, the heart and soul of L<Perl::ToPerl6>.

Damian Conway - For writing B<Perl Best Practices>, finally :)

Chris Dolan - For contributing the best features and Transformer modules.

Andy Lester - Wise sage and master of all-things-testing.

Elliot Shank - The self-proclaimed quality freak.

Giuseppe Maxia - For all the great ideas and positive encouragement.

and Sharon, my wife - For putting up with my all-night code sessions.

Thanks also to the Perl Foundation for providing a grant to support Chris
Dolan's project to implement twenty PBP transformers.
L<http://www.perlfoundation.org/april_1_2007_new_grant_awards>


=head1 AUTHOR

Jeffrey Goff <drforr@pobox.com>

=head1 AUTHOR EMERITUS

Jeffrey Ryan Thalhammer <jeff@imaginative-software.com>


=head1 COPYRIGHT

Copyright (c) 2015 Jeffrey Goff <drforr@pobox.com>. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  The full text of this license
can be found in the LICENSE file included with this module.

=cut

##############################################################################
# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 78
#   indent-tabs-mode: nil
#   c-indentation-style: bsd
# End:
# ex: set ts=8 sts=4 sw=4 tw=78 ft=perl expandtab shiftround :
